/***************************************************************/
/*                                                             */
/*      PROJECT NAME :  331proj                          */
/*      FILE         :  331proj.cpp                      */
/*      DESCRIPTION  :  Main Program                           */
/*                                                             */
/*      This file was generated by e2 studio.                  */
/*                                                             */
/***************************************************************/

#include "interface.h"
#include "motor.hpp"
#include "controller.hpp"
#include "optical_encoder.hpp"
#include <math.h>
#include "global.hpp"


int opt_step = 0;
void main_setup(void)
{
    g_motor.init();
    g_optical_encoder.init();
    g_ctrl.reset();
    high_realtime_interrupt_init();
    system_delay_ms(1);
    realtime_interrupt_init();

    system_delay_ms(100);
    opt_step = 0;
    led_fault_clr();
    system_delay_ms(100);

    opt_step = 0;
}

int32_t g_tick_time = 0;
void main_loop(void)
{
    g_tick_time++;
    led_fault_clr();
    led_state_toggle();
    system_delay_ms(500);
}

float g_target_iq = 0.0f;
float g_target_id = 0.0f;
void high_realtime_interrupt(void)
{
	g_motor.update();
    g_optical_encoder.update(g_motor.config_.pole_pairs, 1.0f);

    if(opt_step == 1 && g_motor.state_ == Motor::STATE_NORMAL)
    {
       if(g_optical_encoder.calibrate_offset(g_motor, 1.0f))
        {
           g_motor.servo_on();
           g_ctrl.reset();
           g_target_iq = 0.0f;
           g_ctrl.set_vel_setpoint(0, 0);
           g_ctrl.vel_ramp_target_ = 0.0f;
           g_target_id = 0.0f;
           opt_step = 4;
        }
    }

    if(opt_step == 4 && g_motor.state_ == Motor::STATE_NORMAL)
    {
        float _pos = g_optical_encoder.count_in_cpr_ + g_optical_encoder.turn_ * g_optical_encoder.config_.cpr;
        float _phase = g_optical_encoder.phase_;
        g_ctrl.update(g_optical_encoder, _pos,g_target_iq, g_motor.config_.requested_current_range);
        g_motor.FOC_current(g_target_id, g_target_iq, _phase, 0.0f);
    }
}

void realtime_interrupt(void)
{
}